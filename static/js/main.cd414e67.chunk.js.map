{"version":3,"sources":["Snake.jsx","Food.jsx","App.js","reportWebVitals.js","index.js"],"names":["Snake","props","snakeDots","map","dot","i","style","left","top","className","Food","getRandomCoordinates","Math","floor","random","App","useState","setSnakeDots","food","setFood","direction","setDirection","speed","setSpeed","moveSnake","useCallback","dots","head","length","push","shift","onGameOver","alert","checkIfOutOfBorders","enlargeSnake","newSnake","unshift","increaseSpeed","checkIfEat","useEffect","moveSnakeHandel","setInterval","document","onkeydown","onKeyDown","clearInterval","e","window","event","keyCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cd414e67.chunk.js","sourcesContent":["export const Snake = (props) => {\r\n  return (\r\n    <div>\r\n      {props.snakeDots.map((dot, i) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`,\r\n        };\r\n        return <div key={i} className=\"snake-dot\" style={style}></div>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","export const Food = (props) => {\r\n  const style = {\r\n    left: `${props.dot[0]}%`,\r\n    top: `${props.dot[1]}%`,\r\n  };\r\n  return <div className=\"snake-food\" style={style}></div>;\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport { Snake } from \"./Snake\";\nimport { Food } from \"./Food\";\n\nconst getRandomCoordinates = () => {\n  const min = 1;\n  const max = 98;\n  const x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  const y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst App = () => {\n  const [snakeDots, setSnakeDots] = useState([\n    [0, 0],\n    [2, 0],\n  ]);\n\n  const [food, setFood] = useState(getRandomCoordinates());\n  const [direction, setDirection] = useState(\"RIGHT\");\n  const [speed, setSpeed] = useState(200);\n\n  const resetGame = () => {\n    setSnakeDots([\n      [0, 0],\n      [2, 0],\n    ]);\n    setFood(getRandomCoordinates());\n    setDirection(\"RIGHT\");\n    setSpeed(200);\n  };\n\n  const moveSnake = useCallback(() => {\n    const dots = [...snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (direction) {\n      case \"RIGHT\":\n        head = [head[0] + 2, head[1]];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 2, head[1]];\n        break;\n      case \"UP\":\n        head = [head[0], head[1] - 2];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 2];\n        break;\n      default:\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    setSnakeDots(dots);\n  }, [snakeDots, direction]);\n\n  const onGameOver = useCallback(() => {\n    alert(`Game over. Snake lenght is ${snakeDots.length}`);\n    resetGame();\n  }, [snakeDots.length]);\n\n  const checkIfOutOfBorders = useCallback(() => {\n    let head = snakeDots[snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      onGameOver();\n    }\n  }, [snakeDots, onGameOver]);\n\n  const enlargeSnake = useCallback(() => {\n    let newSnake = [...snakeDots];\n    newSnake.unshift([]);\n    setSnakeDots(newSnake);\n  }, [snakeDots]);\n\n  const increaseSpeed = useCallback(() => {\n    if (speed > 10) {\n      setSpeed(speed - 10);\n    }\n  }, [speed]);\n\n  const checkIfEat = useCallback(() => {\n    const head = snakeDots[snakeDots.length - 1];\n    if (head[0] === food[0] && head[1] === food[1]) {\n      setFood(getRandomCoordinates());\n      enlargeSnake();\n      increaseSpeed();\n    }\n  }, [enlargeSnake, increaseSpeed, food, snakeDots]);\n\n  useEffect(() => {\n    let moveSnakeHandel = setInterval(moveSnake, speed);\n    document.onkeydown = onKeyDown;\n    checkIfOutOfBorders();\n    checkIfEat();\n\n    return () => {\n      clearInterval(moveSnakeHandel);\n    };\n  }, [moveSnake, speed, checkIfOutOfBorders, checkIfEat]);\n\n  const onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        setDirection(\"UP\");\n        break;\n      case 40:\n        setDirection(\"DOWN\");\n        break;\n      case 37:\n        setDirection(\"LEFT\");\n        break;\n      case 39:\n        setDirection(\"RIGHT\");\n        break;\n      default:\n        setDirection(\"RIGHT\");\n    }\n  };\n\n  return (\n    <div className=\"snake-area\">\n      <Snake snakeDots={snakeDots} />\n      <Food dot={food} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}